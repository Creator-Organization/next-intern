generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String            @id @default(cuid())
  email                String            @unique
  passwordHash         String?           @map("password_hash")
  userType             UserType          @map("user_type")
  isVerified           Boolean           @default(false) @map("is_verified")
  isActive             Boolean           @default(true) @map("is_active")
  isPremium            Boolean           @default(false) @map("is_premium")
  premiumExpiresAt     DateTime?         @map("premium_expires_at")
  googleId             String?           @unique @map("google_id")
  lastLoginAt          DateTime?         @map("last_login_at")
  loginAttempts        Int               @default(0) @map("login_attempts")
  lockedUntil          DateTime?         @map("locked_until")
  verifiedAt           DateTime?         @map("verified_at")
  currentTermsAccepted Boolean           @default(false) @map("current_terms_accepted")
  termsAcceptedAt      DateTime?         @map("terms_accepted_at")
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @updatedAt @map("updated_at")
  candidate            Candidate?
  industry             Industry?
  institute            Institute?
  receivedMessages     Message[]         @relation("ReceivedMessages")
  sentMessages         Message[]         @relation("SentMessages")
  notifications        Notification[]
  auditLogs            PrivacyAuditLog[]
  supportTickets       SupportTicket[]
  termsAcceptances     TermsAcceptance[]
  preferences          UserPreference?
  subscription         UserSubscription?

  @@index([email])
  @@index([userType])
  @@index([isPremium])
  @@index([isActive])
  @@map("users")
}

model Candidate {
  id                 String             @id @default(cuid())
  userId             String             @unique @map("user_id")
  firstName          String             @map("first_name")
  lastName           String             @map("last_name")
  phone              String?
  dateOfBirth        DateTime?          @map("date_of_birth")
  college            String?
  degree             String?
  fieldOfStudy       String?            @map("field_of_study")
  graduationYear     Int?               @map("graduation_year")
  cgpa               Float?
  bio                String?
  resumeUrl          String?            @map("resume_url")
  portfolioUrl       String?            @map("portfolio_url")
  linkedinUrl        String?            @map("linkedin_url")
  githubUrl          String?            @map("github_url")
  city               String?
  state              String?
  country            String?
  showFullName       Boolean            @default(false) @map("show_full_name")
  showContact        Boolean            @default(false) @map("show_contact_info")
  anonymousId        String             @unique @default(cuid()) @map("anonymous_id")
  instituteId        String?            @map("institute_id")
  studentId          String?            @map("student_id")
  profileComplete    Boolean            @default(false) @map("profile_complete")
  emailVerified      Boolean            @default(false) @map("email_verified")
  phoneVerified      Boolean            @default(false) @map("phone_verified")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  applications       Application[]
  skills             CandidateSkill[]
  institute          Institute?         @relation(fields: [instituteId], references: [id])
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificates       Certificate[]
  instituteStudents  InstituteStudent[]
  interviews         Interview[]
  savedOpportunities SavedOpportunity[]

  @@index([userId])
  @@index([instituteId])
  @@index([anonymousId])
  @@index([city, state])
  @@index([graduationYear])
  @@map("candidates")
}

model Industry {
  id                       String        @id @default(cuid())
  userId                   String        @unique @map("user_id")
  companyName              String        @map("company_name")
  industry                 String
  companySize              CompanySize   @map("company_size")
  foundedYear              Int?          @map("founded_year")
  email                    String?
  phone                    String?
  websiteUrl               String?       @map("website_url")
  linkedinUrl              String?       @map("linkedin_url")
  description              String?
  logoUrl                  String?       @map("logo_url")
  address                  String?
  city                     String
  state                    String
  country                  String
  isVerified               Boolean       @default(false) @map("is_verified")
  isActive                 Boolean       @default(true) @map("is_active")
  verifiedAt               DateTime?     @map("verified_at")
  monthlyPostLimit         Int           @default(3) @map("monthly_post_limit")
  currentMonthPosts        Int           @default(0) @map("current_month_posts")
  lastPostLimitReset       DateTime      @default(now()) @map("last_post_limit_reset")
  canViewCandidateContacts Boolean       @default(false) @map("can_view_candidate_contacts")
  showCompanyName          Boolean       @default(false) @map("show_company_name")
  anonymousId              String        @unique @default(cuid()) @map("anonymous_id")
  createdAt                DateTime      @default(now()) @map("created_at")
  updatedAt                DateTime      @updatedAt @map("updated_at")
  applications             Application[]
  user                     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  interviews               Interview[]
  opportunities            Opportunity[]

  @@index([userId])
  @@index([isVerified])
  @@index([isActive])
  @@index([city, state])
  @@index([industry])
  @@index([anonymousId])
  @@map("industries")
}

model Institute {
  id                  String               @id @default(cuid())
  userId              String               @unique @map("user_id")
  instituteName       String               @map("institute_name")
  instituteType       InstituteType        @map("institute_type")
  email               String
  phone               String?
  websiteUrl          String?              @map("website_url")
  description         String?
  logoUrl             String?              @map("logo_url")
  address             String
  city                String
  state               String
  country             String
  accreditationNumber String?              @map("accreditation_number")
  ugcApproved         Boolean              @default(false) @map("ugc_approved")
  aicteApproved       Boolean              @default(false) @map("aicte_approved")
  isVerified          Boolean              @default(false) @map("is_verified")
  isActive            Boolean              @default(true) @map("is_active")
  verifiedAt          DateTime?            @map("verified_at")
  totalStudents       Int                  @default(0) @map("total_students")
  activeStudents      Int                  @default(0) @map("active_students")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  students            Candidate[]
  analytics           InstituteAnalytics[]
  domains             InstituteDomain[]
  programs            InstituteProgram[]
  instituteStudents   InstituteStudent[]
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isVerified])
  @@index([isActive])
  @@index([city, state])
  @@index([instituteType])
  @@map("institutes")
}

model InstituteDomain {
  id          String    @id @default(cuid())
  instituteId String    @map("institute_id")
  domain      String
  isVerified  Boolean   @default(false) @map("is_verified")
  verifiedAt  DateTime? @map("verified_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  institute   Institute @relation(fields: [instituteId], references: [id], onDelete: Cascade)

  @@unique([instituteId, domain])
  @@index([domain])
  @@index([isVerified])
  @@map("institute_domains")
}

model UserSubscription {
  id                   String             @id @default(cuid())
  userId               String             @unique @map("user_id")
  plan                 SubscriptionPlan
  status               SubscriptionStatus @default(PENDING)
  priceAmount          Int
  currency             String             @default("INR")
  billingCycle         String
  startDate            DateTime           @map("start_date")
  endDate              DateTime           @map("end_date")
  nextBillingDate      DateTime?          @map("next_billing_date")
  stripeCustomerId     String?            @map("stripe_customer_id")
  stripeSubscriptionId String?            @map("stripe_subscription_id")
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([plan])
  @@index([endDate])
  @@map("user_subscriptions")
}

model UserPreference {
  id                    String   @id @default(cuid())
  userId                String   @unique @map("user_id")
  theme                 String   @default("teal")
  language              String   @default("en")
  timezone              String   @default("Asia/Kolkata")
  emailNotifications    Boolean  @default(true) @map("email_notifications")
  pushNotifications     Boolean  @default(true) @map("push_notifications")
  marketingEmails       Boolean  @default(false) @map("marketing_emails")
  profileVisibility     String   @default("PUBLIC")
  showContactInfo       Boolean  @default(false) @map("show_contact_info")
  showSalaryExpectation Boolean  @default(false) @map("show_salary_expectation")
  autoApplyEnabled      Boolean  @default(false) @map("auto_apply_enabled")
  jobAlertEnabled       Boolean  @default(true) @map("job_alert_enabled")
  updatedAt             DateTime @updatedAt @map("updated_at")
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([theme])
  @@map("user_preferences")
}

// Add these fields to your Opportunity model in schema.prisma
// Find the Opportunity model and add the approval fields after the existing fields

model Opportunity {
  id                  String             @id @default(cuid())
  industryId          String             @map("industry_id")
  title               String
  description         String
  type                OpportunityType    @default(INTERNSHIP)
  categoryId          String             @map("category_id")
  locationId          String             @map("location_id")
  workType            WorkType
  duration            Int
  stipend             Int?
  currency            String             @default("INR")
  requirements        String
  minQualification    String?            @map("min_qualification")
  preferredSkills     String?            @map("preferred_skills")
  experienceRequired  Int?               @default(0) @map("experience_required")
  applicationDeadline DateTime?          @map("application_deadline")
  startDate           DateTime?          @map("start_date")
  isActive            Boolean            @default(true) @map("is_active")
  isPremiumOnly       Boolean            @default(false) @map("is_premium_only")
  showCompanyName     Boolean            @default(false) @map("show_company_name")
  slug                String             @unique
  viewCount           Int                @default(0) @map("view_count")
  applicationCount    Int                @default(0) @map("application_count")
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @updatedAt @map("updated_at")

  // ✅ NEW APPROVAL FIELDS - Add these 5 fields
  isApproved          Boolean            @default(false) @map("is_approved")
  approvalStatus      String             @default("PENDING") @map("approval_status") // PENDING, APPROVED, REJECTED
  approvedBy          String?            @map("approved_by") // Admin user ID
  approvedAt          DateTime?          @map("approved_at")
  rejectionReason     String?            @map("rejection_reason")

  // Relationships
  industry            Industry           @relation(fields: [industryId], references: [id], onDelete: Cascade)
  category            Category           @relation(fields: [categoryId], references: [id])
  location            Location           @relation(fields: [locationId], references: [id])
  skills              OpportunitySkill[]
  applications        Application[]
  savedBy             SavedOpportunity[]
  views               OpportunityView[]

  @@map("opportunities")
  @@index([industryId])
  @@index([categoryId])
  @@index([locationId])
  @@index([type])
  @@index([workType])
  @@index([isActive])
  @@index([isPremiumOnly])
  @@index([slug])
  @@index([applicationDeadline])
  @@index([isApproved])           // ✅ NEW INDEX
  @@index([approvalStatus])       // ✅ NEW INDEX
}

model OpportunitySkill {
  id            String      @id @default(cuid())
  opportunityId String      @map("opportunity_id")
  skillName     String      @map("skill_name")
  isRequired    Boolean     @default(true) @map("is_required")
  minLevel      SkillLevel? @map("min_level")
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)

  @@unique([opportunityId, skillName])
  @@index([opportunityId])
  @@index([skillName])
  @@map("opportunity_skills")
}

model Application {
  id              String            @id @default(cuid())
  opportunityId   String            @map("opportunity_id")
  candidateId     String            @map("candidate_id")
  industryId      String            @map("industry_id")
  coverLetter     String?           @map("cover_letter")
  resumeUrl       String?           @map("resume_url")
  expectedSalary  Int?              @map("expected_salary")
  canJoinFrom     DateTime?         @map("can_join_from")
  status          ApplicationStatus @default(PENDING)
  appliedAt       DateTime          @default(now()) @map("applied_at")
  reviewedAt      DateTime?         @map("reviewed_at")
  companyNotes    String?           @map("company_notes")
  rejectionReason String?           @map("rejection_reason")
  rating          Int?
  candidateViewed Boolean           @default(false) @map("candidate_viewed")
  contactViewed   Boolean           @default(false) @map("contact_viewed")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  candidate       Candidate         @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  industry        Industry          @relation(fields: [industryId], references: [id], onDelete: Cascade)
  opportunity     Opportunity       @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  interviews      Interview[]

  @@unique([opportunityId, candidateId])
  @@index([opportunityId])
  @@index([candidateId])
  @@index([industryId])
  @@index([status])
  @@index([appliedAt])
  @@map("applications")
}

model SavedOpportunity {
  id            String      @id @default(cuid())
  candidateId   String      @map("candidate_id")
  opportunityId String      @map("opportunity_id")
  savedAt       DateTime    @default(now()) @map("saved_at")
  notes         String?
  candidate     Candidate   @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)

  @@unique([candidateId, opportunityId])
  @@index([candidateId])
  @@index([opportunityId])
  @@index([savedAt])
  @@map("saved_opportunities")
}

model CandidateSkill {
  id                String     @id @default(cuid())
  candidateId       String     @map("candidate_id")
  skillName         String     @map("skill_name")
  proficiency       SkillLevel
  yearsOfExperience Int?       @map("years_of_experience")
  certificationUrl  String?    @map("certification_url")
  isEndorsed        Boolean    @default(false) @map("is_endorsed")
  candidate         Candidate  @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@unique([candidateId, skillName])
  @@index([candidateId])
  @@index([skillName])
  @@index([proficiency])
  @@map("candidate_skills")
}

model OpportunityView {
  id            String      @id @default(cuid())
  opportunityId String      @map("opportunity_id")
  viewerType    String      @map("viewer_type")
  isPremium     Boolean     @default(false) @map("is_premium")
  userAgent     String?     @map("user_agent")
  ipAddress     String?     @map("ip_address")
  referer       String?
  viewedAt      DateTime    @default(now()) @map("viewed_at")
  timeSpent     Int?        @map("time_spent")
  city          String?
  country       String?
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)

  @@index([opportunityId])
  @@index([viewedAt])
  @@index([viewerType])
  @@map("opportunity_views")
}

model InstituteStudent {
  id          String           @id @default(cuid())
  instituteId String           @map("institute_id")
  candidateId String           @map("candidate_id")
  studentId   String           @map("student_id")
  programId   String           @map("program_id")
  semester    Int?
  year        Int?
  cgpa        Float?
  isActive    Boolean          @default(true) @map("is_active")
  enrolledAt  DateTime         @default(now()) @map("enrolled_at")
  graduatedAt DateTime?        @map("graduated_at")
  candidate   Candidate        @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  institute   Institute        @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  program     InstituteProgram @relation(fields: [programId], references: [id])

  @@unique([instituteId, studentId])
  @@unique([instituteId, candidateId])
  @@index([instituteId])
  @@index([candidateId])
  @@index([programId])
  @@index([isActive])
  @@map("institute_students")
}

model InstituteAnalytics {
  id                       String    @id @default(cuid())
  instituteId              String    @map("institute_id")
  month                    Int
  year                     Int
  totalStudents            Int       @default(0) @map("total_students")
  activeStudents           Int       @default(0) @map("active_students")
  registeredStudents       Int       @default(0) @map("registered_students")
  totalApplications        Int       @default(0) @map("total_applications")
  successfulPlacements     Int       @default(0) @map("successful_placements")
  averageStipend           Float?    @map("average_stipend")
  programsWithRequirements Int       @default(0) @map("programs_with_requirements")
  completedRequirements    Int       @default(0) @map("completed_requirements")
  calculatedAt             DateTime  @default(now()) @map("calculated_at")
  institute                Institute @relation(fields: [instituteId], references: [id], onDelete: Cascade)

  @@unique([instituteId, month, year])
  @@index([instituteId])
  @@index([year, month])
  @@map("institute_analytics")
}

model InstituteProgram {
  id                 String             @id @default(cuid())
  instituteId        String             @map("institute_id")
  programName        String             @map("program_name")
  programType        ProgramType        @map("program_type")
  department         String
  internshipRequired Boolean            @default(false) @map("internship_required")
  minimumDuration    Int?               @map("minimum_duration")
  creditHours        Int?               @map("credit_hours")
  semester           Int?
  totalSeats         Int?               @map("total_seats")
  currentStudents    Int                @default(0) @map("current_students")
  isActive           Boolean            @default(true) @map("is_active")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  institute          Institute          @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  students           InstituteStudent[]

  @@unique([instituteId, programName])
  @@index([instituteId])
  @@index([programType])
  @@index([internshipRequired])
  @@index([isActive])
  @@map("institute_programs")
}

model Message {
  id            String    @id @default(cuid())
  senderId      String    @map("sender_id")
  receiverId    String    @map("receiver_id")
  subject       String?
  content       String
  attachmentUrl String?   @map("attachment_url")
  isRead        Boolean   @default(false) @map("is_read")
  readAt        DateTime? @map("read_at")
  isBlocked     Boolean   @default(false) @map("is_blocked")
  reportedAt    DateTime? @map("reported_at")
  sentAt        DateTime  @default(now()) @map("sent_at")
  receiver      User      @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender        User      @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([sentAt])
  @@index([isRead])
  @@map("messages")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String           @map("user_id")
  type      NotificationType
  title     String
  message   String
  data      Json?
  actionUrl String?          @map("action_url")
  isRead    Boolean          @default(false) @map("is_read")
  readAt    DateTime?        @map("read_at")
  createdAt DateTime         @default(now()) @map("created_at")
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

model Interview {
  id             String            @id @default(cuid())
  applicationId  String            @map("application_id")
  industryId     String            @map("industry_id")
  candidateId    String            @map("candidate_id")
  title          String
  description    String?
  scheduledAt    DateTime          @map("scheduled_at")
  duration       Int               @default(60)
  location       String?
  meetingUrl     String?           @map("meeting_url")
  type           InterviewType
  status         InterviewStatus   @default(SCHEDULED)
  outcome        InterviewOutcome?
  feedback       String?
  rating         Int?
  companyNotes   String?           @map("company_notes")
  candidateNotes String?           @map("candidate_notes")
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  application    Application       @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  candidate      Candidate         @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  industry       Industry          @relation(fields: [industryId], references: [id], onDelete: Cascade)

  @@index([applicationId])
  @@index([industryId])
  @@index([candidateId])
  @@index([scheduledAt])
  @@index([status])
  @@map("interviews")
}

model SupportTicket {
  id          String         @id @default(cuid())
  userId      String         @map("user_id")
  subject     String
  description String
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  category    String
  response    String?
  resolvedAt  DateTime?      @map("resolved_at")
  assignedTo  String?        @map("assigned_to")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([category])
  @@index([createdAt])
  @@map("support_tickets")
}

model TermsVersion {
  id            String            @id @default(cuid())
  userType      UserType          @map("user_type")
  version       String
  title         String
  content       String            @map("content")
  isActive      Boolean           @default(true) @map("is_active")
  isCurrent     Boolean           @default(false) @map("is_current")
  effectiveFrom DateTime          @map("effective_from")
  effectiveTo   DateTime?         @map("effective_to")
  createdAt     DateTime          @default(now()) @map("created_at")
  createdBy     String            @map("created_by")
  changeLog     String?           @map("change_log")
  acceptances   TermsAcceptance[]

  @@unique([userType, version])
  @@index([userType])
  @@index([isActive])
  @@index([isCurrent])
  @@index([effectiveFrom])
  @@map("terms_versions")
}

model TermsAcceptance {
  id               String       @id @default(cuid())
  userId           String       @map("user_id")
  termsVersionId   String       @map("terms_version_id")
  acceptedAt       DateTime     @default(now()) @map("accepted_at")
  ipAddress        String       @map("ip_address")
  userAgent        String       @map("user_agent")
  digitalSignature String?      @map("digital_signature")
  witnessEmail     String?      @map("witness_email")
  isActive         Boolean      @default(true) @map("is_active")
  revokedAt        DateTime?    @map("revoked_at")
  revokedReason    String?      @map("revoked_reason")
  userType         UserType     @map("user_type")
  termsVersion     TermsVersion @relation(fields: [termsVersionId], references: [id])
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, termsVersionId])
  @@index([userId])
  @@index([termsVersionId])
  @@index([acceptedAt])
  @@index([isActive])
  @@map("terms_acceptances")
}

model PrivacyAuditLog {
  id              String      @id @default(cuid())
  userId          String      @map("user_id")
  action          AuditAction
  targetUserId    String?     @map("target_user_id")
  targetUserType  UserType?   @map("target_user_type")
  resourceId      String?     @map("resource_id")
  resourceType    String?     @map("resource_type")
  accessReason    String?     @map("access_reason")
  isPremiumAccess Boolean     @default(false) @map("is_premium_access")
  ipAddress       String      @map("ip_address")
  userAgent       String      @map("user_agent")
  sessionId       String?     @map("session_id")
  accessedAt      DateTime    @default(now()) @map("accessed_at")
  dataReturned    Json?       @map("data_returned")
  legalBasis      String?     @map("legal_basis")
  retentionPeriod Int?        @map("retention_period")
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([targetUserId])
  @@index([action])
  @@index([accessedAt])
  @@index([isPremiumAccess])
  @@map("privacy_audit_logs")
}

model Category {
  id               String        @id @default(cuid())
  name             String        @unique
  slug             String        @unique
  description      String?
  icon             String?
  color            String?
  sortOrder        Int           @default(0) @map("sort_order")
  metaTitle        String?       @map("meta_title")
  metaDescription  String?       @map("meta_description")
  isActive         Boolean       @default(true) @map("is_active")
  opportunityCount Int           @default(0) @map("opportunity_count")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  opportunities    Opportunity[]

  @@index([slug])
  @@index([isActive])
  @@index([sortOrder])
  @@map("categories")
}

model Location {
  id               String        @id @default(cuid())
  city             String
  state            String
  country          String
  slug             String        @unique
  latitude         Float?
  longitude        Float?
  timezone         String?       @default("Asia/Kolkata")
  metaTitle        String?       @map("meta_title")
  metaDescription  String?       @map("meta_description")
  isActive         Boolean       @default(true) @map("is_active")
  opportunityCount Int           @default(0) @map("opportunity_count")
  candidateCount   Int           @default(0) @map("candidate_count")
  industryCount    Int           @default(0) @map("industry_count")
  opportunities    Opportunity[]

  @@unique([city, state, country])
  @@index([slug])
  @@index([city, state])
  @@index([isActive])
  @@map("locations")
}

model BlogPost {
  id              String         @id @default(cuid())
  title           String
  slug            String         @unique
  excerpt         String
  content         String
  featuredImage   String?        @map("featured_image")
  imageAlt        String?        @map("image_alt")
  metaTitle       String?        @map("meta_title")
  metaDescription String?        @map("meta_description")
  status          BlogPostStatus @default(DRAFT)
  publishedAt     DateTime?      @map("published_at")
  authorName      String         @map("author_name")
  authorEmail     String         @map("author_email")
  authorBio       String?        @map("author_bio")
  category        String
  tags            String[]
  viewCount       Int            @default(0) @map("view_count")
  likeCount       Int            @default(0) @map("like_count")
  shareCount      Int            @default(0) @map("share_count")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  @@index([slug])
  @@index([status])
  @@index([publishedAt])
  @@index([category])
  @@map("blog_posts")
}

model Certificate {
  id            String    @id @default(cuid())
  candidateId   String    @map("candidate_id")
  name          String
  issuer        String
  issueDate     DateTime? @map("issue_date")
  expiryDate    DateTime? @map("expiry_date")
  credentialId  String?   @map("credential_id")
  credentialUrl String?   @map("credential_url")
  isVerified    Boolean   @default(false) @map("is_verified")
  description   String?
  skills        String[]
  createdAt     DateTime  @default(now()) @map("created_at")
  candidate     Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@index([candidateId])
  @@index([issuer])
  @@index([isVerified])
  @@map("certificates")
}

model SearchQuery {
  id              String           @id @default(cuid())
  query           String
  userType        UserType?        @map("user_type")
  isPremium       Boolean          @default(false) @map("is_premium")
  filters         Json?
  category        String?
  location        String?
  workType        WorkType?
  opportunityType OpportunityType?
  resultsCount    Int              @map("results_count")
  clickedResults  Int              @default(0) @map("clicked_results")
  userIp          String           @map("user_ip")
  userAgent       String?          @map("user_agent")
  referer         String?
  searchedAt      DateTime         @default(now()) @map("searched_at")

  @@index([query])
  @@index([searchedAt])
  @@index([userType])
  @@index([resultsCount])
  @@map("search_queries")
}

enum UserType {
  CANDIDATE
  INDUSTRY
  INSTITUTE
  ADMIN
}

enum OpportunityType {
  INTERNSHIP
  PROJECT
  FREELANCING
}

enum WorkType {
  REMOTE
  ONSITE
  HYBRID
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  SHORTLISTED
  REJECTED
  INTERVIEW_SCHEDULED
  SELECTED
  WITHDRAWN
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum NotificationType {
  APPLICATION_UPDATE
  NEW_OPPORTUNITY
  MESSAGE_RECEIVED
  INTERVIEW_SCHEDULED
  SYSTEM_ALERT
  MARKETING
}

enum InterviewType {
  PHONE
  VIDEO
  IN_PERSON
  TECHNICAL
  HR
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
  NO_SHOW
}

enum InterviewOutcome {
  SELECTED
  REJECTED
  ON_HOLD
  NEXT_ROUND
}

enum BlogPostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum SubscriptionPlan {
  FREE
  PREMIUM_CANDIDATE
  PREMIUM_INDUSTRY
  INSTITUTE_BASIC
  INSTITUTE_PREMIUM
}

enum InstituteType {
  UNIVERSITY
  COLLEGE
  TECHNICAL_INSTITUTE
  COMMUNITY_COLLEGE
  VOCATIONAL_SCHOOL
}

enum ProgramType {
  BACHELORS
  MASTERS
  DIPLOMA
  CERTIFICATE
  PHD
}

enum AuditAction {
  VIEW_PROFILE
  VIEW_CONTACT
  DOWNLOAD_RESUME
  VIEW_OPPORTUNITY
  SEND_MESSAGE
  ACCESS_PREMIUM_FEATURE
  TERMS_ACCEPTED
}
